springboot k8's application:
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class EmployeeApplication {

	public static void main(String[] args) {
		SpringApplication.run(EmployeeApplication.class, args);
	}

}

Entity:
package com.example.demo.entity;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

@Entity
public class Employee {
	@Id
	@GeneratedValue
	private int id;
	private String ename;
	private int salary;
	private String desg;
	private String loction;
	public Employee() {
		super();
		// TODO Auto-generated constructor stub
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getEname() {
		return ename;
	}
	public void setEname(String ename) {
		this.ename = ename;
	}
	public int getSalary() {
		return salary;
	}
	public void setSalary(int salary) {
		this.salary = salary;
	}
	public String getDesg() {
		return desg;
	}
	public void setDesg(String desg) {
		this.desg = desg;
	}
	public String getLoction() {
		return loction;
	}
	public void setLoction(String loction) {
		this.loction = loction;
	}
}

Repository:

package com.example.demo.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.demo.entity.Employee;
@Repository
public interface EmployeeRepository extends JpaRepository<Employee,Integer>{

}

Services:

package com.example.demo.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.entity.Employee;
import com.example.demo.repository.EmployeeRepository;

@Service
public class EmployeeService {
	@Autowired
	private EmployeeRepository repository;
	
	public Employee saveEmployee(Employee ep) throws Exception{
		Employee employee=repository.findById(ep.getId()).orElse(null);
		if(employee == null) {
		return repository.save(ep);
		}
		else {
			throw new Exception("Employee id already in database...");
		}
		
	}
	public List<Employee> saveEmployees(List<Employee>employees){
		return repository.saveAll(employees);
		
	}

	public Employee getEmployeeById(int id) {
		// TODO Auto-generated method stub
		return repository.findById(id).orElse(null);
	}

	public List<Employee> getEmployees() {
		// TODO Auto-generated method stub
		return repository.findAll();
	}

}

Controller :

package com.example.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.Employee;
import com.example.demo.service.EmployeeService;

@RestController
public class EmployeeController {
	@Autowired
	private EmployeeService service;
	
	@PostMapping("/addEmployee")
	public Employee addEmployee(@RequestBody Employee employee) throws Exception{
		return service.saveEmployee(employee);
	}
	@PostMapping("/addEmployees")
	public List<Employee> addEmployees(@RequestBody List<Employee>ep){
		return service.saveEmployees(ep);
	}
	
	@GetMapping("/employee")
	public List<Employee> FindAllEmployees(){
		return service.getEmployees();
	}
	@GetMapping("/employee/{id}")
	public Employee FindEmployeeById(@PathVariable int id) {
		return service.getEmployeeById(id);
	}
	

}

POM.xml:

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.16</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>employee</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>employee</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>


Application.properties :

server.port=8081

spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/divya
spring.datasource.username=root
spring.datasource.password=******
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql=true

output :


  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
␛[32m :: Spring Boot :: ␛[39m             ␛[2m (v2.7.16)␛[0;39m

␛[2m2023-11-02 04:47:39.931␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mcom.example.demo.EmployeeApplication    ␛[0;39m ␛[2m:␛[0;39m Starting EmployeeApplication using Java 11.0.20.1 on ubuntu with PID 31875 (/home/labuser/Desktop/spring-java/employee/target/classes started by labuser in /home/labuser/Desktop/spring-java/employee)
␛[2m2023-11-02 04:47:39.937␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mcom.example.demo.EmployeeApplication    ␛[0;39m ␛[2m:␛[0;39m No active profile set, falling back to 1 default profile: "default"
␛[2m2023-11-02 04:47:42.078␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36m.s.d.r.c.RepositoryConfigurationDelegate␛[0;39m ␛[2m:␛[0;39m Bootstrapping Spring Data JPA repositories in DEFAULT mode.
␛[2m2023-11-02 04:47:42.177␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36m.s.d.r.c.RepositoryConfigurationDelegate␛[0;39m ␛[2m:␛[0;39m Finished Spring Data repository scanning in 76 ms. Found 1 JPA repository interfaces.
␛[2m2023-11-02 04:47:43.342␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mo.s.b.w.embedded.tomcat.TomcatWebServer ␛[0;39m ␛[2m:␛[0;39m Tomcat initialized with port(s): 8081 (http)
␛[2m2023-11-02 04:47:43.369␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mo.apache.catalina.core.StandardService  ␛[0;39m ␛[2m:␛[0;39m Starting service [Tomcat]
␛[2m2023-11-02 04:47:43.369␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36morg.apache.catalina.core.StandardEngine ␛[0;39m ␛[2m:␛[0;39m Starting Servlet engine: [Apache Tomcat/9.0.80]
␛[2m2023-11-02 04:47:43.556␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mo.a.c.c.C.[Tomcat].[localhost].[/]      ␛[0;39m ␛[2m:␛[0;39m Initializing Spring embedded WebApplicationContext
␛[2m2023-11-02 04:47:43.556␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mw.s.c.ServletWebServerApplicationContext␛[0;39m ␛[2m:␛[0;39m Root WebApplicationContext: initialization completed in 3440 ms
␛[2m2023-11-02 04:47:44.116␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mo.hibernate.jpa.internal.util.LogHelper ␛[0;39m ␛[2m:␛[0;39m HHH000204: Processing PersistenceUnitInfo [name: default]
␛[2m2023-11-02 04:47:44.462␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36morg.hibernate.Version                   ␛[0;39m ␛[2m:␛[0;39m HHH000412: Hibernate ORM core version 5.6.15.Final
␛[2m2023-11-02 04:47:44.752␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mo.hibernate.annotations.common.Version  ␛[0;39m ␛[2m:␛[0;39m HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
␛[2m2023-11-02 04:47:44.925␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mcom.zaxxer.hikari.HikariDataSource      ␛[0;39m ␛[2m:␛[0;39m HikariPool-1 - Starting...
␛[2m2023-11-02 04:47:45.532␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mcom.zaxxer.hikari.HikariDataSource      ␛[0;39m ␛[2m:␛[0;39m HikariPool-1 - Start completed.
␛[2m2023-11-02 04:47:45.592␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36morg.hibernate.dialect.Dialect           ␛[0;39m ␛[2m:␛[0;39m HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
␛[2m2023-11-02 04:47:46.671␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mo.h.e.t.j.p.i.JtaPlatformInitiator      ␛[0;39m ␛[2m:␛[0;39m HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
␛[2m2023-11-02 04:47:46.688␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mj.LocalContainerEntityManagerFactoryBean␛[0;39m ␛[2m:␛[0;39m Initialized JPA EntityManagerFactory for persistence unit 'default'
␛[2m2023-11-02 04:47:47.191␛[0;39m ␛[33m WARN␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mJpaBaseConfiguration$JpaWebConfiguration␛[0;39m ␛[2m:␛[0;39m spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
␛[2m2023-11-02 04:47:47.635␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mo.s.b.w.embedded.tomcat.TomcatWebServer ␛[0;39m ␛[2m:␛[0;39m Tomcat started on port(s): 8081 (http) with context path ''
␛[2m2023-11-02 04:47:47.655␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[           main]␛[0;39m ␛[36mcom.example.demo.EmployeeApplication    ␛[0;39m ␛[2m:␛[0;39m Started EmployeeApplication in 8.61 seconds (JVM running for 11.118)
␛[2m2023-11-02 04:54:34.410␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[nio-8081-exec-1]␛[0;39m ␛[36mo.a.c.c.C.[Tomcat].[localhost].[/]      ␛[0;39m ␛[2m:␛[0;39m Initializing Spring DispatcherServlet 'dispatcherServlet'
␛[2m2023-11-02 04:54:34.410␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[nio-8081-exec-1]␛[0;39m ␛[36mo.s.web.servlet.DispatcherServlet       ␛[0;39m ␛[2m:␛[0;39m Initializing Servlet 'dispatcherServlet'
␛[2m2023-11-02 04:54:34.423␛[0;39m ␛[32m INFO␛[0;39m ␛[35m31875␛[0;39m ␛[2m---␛[0;39m ␛[2m[nio-8081-exec-1]␛[0;39m ␛[36mo.s.web.servlet.DispatcherServlet       ␛[0;39m ␛[2m:␛[0;39m Completed initialization in 13 ms


Dockerfile:

FROM openjdk:11
ADD target/*.jar employee-0.0.1-SNAPSHOT.jar
ENTRYPOINT [ "java","-jar","employee-0.0.1-SNAPSHOT.jar" ]

Build Docker image using Dockerfile :

labuser@ubuntu:~/Desktop/spring-java/employee$ docker build -t spring-k8s .
[+] Building 2.7s (7/7) FINISHED                                 docker:default
 => [internal] load build definition from Dockerfile                       0.2s
 => => transferring dockerfile: 156B                                       0.1s
 => [internal] load .dockerignore                                          0.2s
 => => transferring context: 2B                                            0.1s
 => [internal] load metadata for docker.io/library/openjdk:11              2.1s
 => [internal] load build context                                          0.1s
 => => transferring context: 84B                                           0.1s
 => [1/2] FROM docker.io/library/openjdk:11@sha256:99bac5bf83633e3c7399ae  0.0s
 => CACHED [2/2] ADD target/*.jar employee-0.0.1-SNAPSHOT.jar              0.0s
 => exporting to image                                                     0.0s
 => => exporting layers                                                    0.0s
 => => writing image sha256:56088ec3a0e4ad23ac87b1eda4a3c2e8febeea3518856  0.0s
 => => naming to docker.io/library/spring-k8s                              0.0s


labuser@ubuntu:~/Desktop/spring-java/employee$ docker images
REPOSITORY                    TAG       IMAGE ID       CREATED        SIZE
divya                         latest    56088ec3a0e4   2 weeks ago    693MB
spring-k8s                    latest    56088ec3a0e4   2 weeks ago    693MB

push docker images to docker hub :

abuser@ubuntu:~/Desktop/spring-java/employee$ docker login
Log in with your Docker ID or email address to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com/ to create one.
You can log in with your password or a Personal Access Token (PAT). Using a limited-scope PAT grants better security and is required for organizations using SSO. Learn more at https://docs.docker.com/go/access-tokens/

Username: divya951595
Password: 
WARNING! Your password will be stored unencrypted in /home/labuser/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded

push the docker image :

labuser@ubuntu:~/Desktop/spring-java/employee$ docker tag spring-k8s divya951595/demo
labuser@ubuntu:~/Desktop/spring-java/employee$ docker images
REPOSITORY                    TAG       IMAGE ID       CREATED        SIZE
divya951595/demo              latest    56088ec3a0e4   2 weeks ago    693MB
divya                         latest    56088ec3a0e4   2 weeks ago    693MB
spring-k8s                    latest    56088ec3a0e4   2 weeks ago    693MB
gcr.io/k8s-minikube/kicbase   v0.0.40   c6cc01e60919   3 months ago   1.19GB
labuser@ubuntu:~/Desktop/spring-java/employee$ docker push divya951595/demo
Using default tag: latest
The push refers to repository [docker.io/divya951595/demo]
9250cd1f4222: Pushed 
7b7f3078e1db: Pushed 
826c3ddbb29c: Pushed 
b626401ef603: Pushed 
9b55156abf26: Pushed 
293d5db30c9f: Pushed 
03127cdb479b: Pushed 
9c742cd6c7a5: Pushed 
latest: digest: sha256:c598d1233a5a1b7a20f8f9bf342b404540e4d9374d0bab2f91ea0a2a7d9bf4fd size: 2007


